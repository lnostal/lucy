import actions as a 
import main

# ----- help -----

def describe_commands():
   description = """
/start\t–∏–Ω—Ñ–æ –æ —á–∞—Ç–µ
/help\t–ø–æ–¥—Å–∫–∞–∑–∫–∞

--–≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–¥–µ—Å—å--
"""
   for action in list(a.user_actions):
      description += '\n/{} -- {}'.format(action.name, action.value)

   description += "\n/poops -- —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫–∞—à–µ–∫ –≤ —á–∞—Ç–µ\n\nüí© –∫–∞–∫–∞—à–µ–∫ —Å–µ–π—á–∞—Å: {} üí©".format(main.poop_count)

   return description



# ----- start -----

def welcome():
    welcome_message = """
‚ú® –∑–∞–≤–µ–¥–∏ –∫–æ—à–µ—á–∫—É –≤ —Å–≤–æ–µ–º —á–∞—Ç–∏–∫–µ ‚ú®
–ª—é—Å—è –Ω–µ –¥–∞—Å—Ç –∑–∞—Å–∫—É—á–∞—Ç—å

–≥–∞–π–¥ –ø–æ —á–∞—Ç—É:

{}
""".format(describe_commands())
    return welcome_message

def to_reply(action):
    if action == a.lucy_random_actions.poop:
       main.poop_count += 1
    return '–≤—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å ' + action.value + '\n'

# ----- pet -----

def pet():
   message = to_reply(a.user_actions.pet)
   message += a.get_reply_action(a.lucy_reply_actions.wanna_pet, a.lucy_reply_actions.not_wanna_pet)
   return message

# ----- roar -----
def roar():
   message = to_reply(a.user_actions.roar)
   message += a.get_reply_action(a.lucy_random_actions.angry, a.lucy_reply_actions.ignore, a.lucy_random_actions.poop)
   return message

# ----- purr_pet -----
def pet():
   message = to_reply(a.user_actions.purr_pet)
   message += a.get_reply_action(a.lucy_reply_actions.wanna_pet, a.lucy_reply_actions.not_wanna_pet)
   return message

# ----- punish -----
def punish():
   message = to_reply(a.user_actions.punish)
   message += a.get_reply_action(a.lucy_reply_actions.not_worry, a.lucy_reply_actions.ignore, a.lucy_random_actions.angry)
   return message

# ----- purr_pet -----
def purr_pet():
   message = to_reply(a.user_actions.purr_pet)
   message += a.get_reply_action(a.lucy_reply_actions.wanna_pet, a.lucy_reply_actions.not_wanna_pet)
   return message

# ----- clean -----
def clean():
    message = to_reply(a.user_actions.clean)
    if main.poop_count == 0:
      return message + "–∞ —É–±–∏—Ä–∞—Ç—å-—Ç–æ –Ω–µ—á–µ–≥–æ!"
   
    main.poop_count -= 1
    message += "–∫–∞–∫–∞—à–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω—ã\n"
    message += a.get_reply_action(a.lucy_reply_actions.worry, a.lucy_reply_actions.not_worry, a.lucy_reply_actions.ignore)
    return message


# ----- play -----
def play():
   message = to_reply(a.user_actions.play)
   message += a.get_reply_action(a.lucy_reply_actions.wanna_play, a.lucy_reply_actions.ignore, a.lucy_reply_actions.not_worry)
   return message

# ----- feed -----
def feed():
   message = to_reply(a.user_actions.feed)
   message += a.get_reply_action(a.lucy_reply_actions.wanna_eat, a.lucy_reply_actions.not_wanna_eat)
   return message

# ----- open_door -----
def open_door():
   message = to_reply(a.user_actions.open_door)
   message += a.get_reply_action(a.lucy_reply_actions.wanna_door, a.lucy_reply_actions.not_wanna_door)
   return message

# ----- poops -----
def poops():
    message = "{}\n–≤—Å–µ–≥–æ: {}\n".format('üí©'*main.poop_count, main.poop_count)

    if main.poop_count == 0:
       return message + "–≤—Å–µ —É–±—Ä–∞–Ω–æ, –≤ —á–∞—Ç–µ —á–∏—Å—Ç–æ—Ç–∞ –∏ –ø–æ—Ä—è–¥–æ–∫"

    if main.poop_count < 6:
       return message + "–Ω–∞–¥–æ –±—ã —É–±—Ä–∞—Ç—å—Å—è"
    
    if main.poop_count < 11:
       return message + "–≤ —á–∞—Ç–µ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π –∞—Ä–æ–º–∞—Ç. –Ω–∞ –ø–æ–ª—É —Ä–∞—Å—Å—ã–ø–∞–Ω—ã –∫–∞–∫–∏–µ-—Ç–æ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ —à—Ç—É–∫–∏"
    
    if main.poop_count < 21:
       return message + "–≤–∞—à–∏–º –º–∞–º–∞–º –∑–∞ –≤–∞—Å —Å—Ç—ã–¥–Ω–æ"
    
    if main.poop_count > 20:
       return message + "–≤ —á–∞—Ç–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –º–∞—Å—Å–∞–∂–Ω—ã–π –∫–æ–≤–µ—Ä. –æ—Ç–∫—É–¥–∞ –æ–Ω –∑–¥–µ—Å—å –∏ –ø–æ—á–µ–º—É —Ç–∞–∫ —Å—Ç—Ä–∞–Ω–Ω–æ –ø–∞—Ö–Ω–µ—Ç?"

# ----- triggers -----

def trigger(message):  
   triggers = ["–µ–±–∞—Ç—å —Ç—É –ª—é—Å—é", "–ª—é—Å—è", "–ª—é—Å–µ", "–ª—é—Å—é", "–ª—é—Å–∏"]

   text = message.lower()
   answer = False

   for t in triggers:
      if t in text:
         answer = True
         break

   return answer

